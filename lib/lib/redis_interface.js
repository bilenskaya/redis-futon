// Generated by CoffeeScript 1.3.3
var RedisInterface, redis,
  __slice = [].slice;

redis = require("redis");

RedisInterface = (function() {

  function RedisInterface(host, port) {
    this.host = host != null ? host : 'localhost';
    this.port = port != null ? port : 6379;
    this.client = redis.createClient(this.port, this.host);
    this.client.on("error", function(err) {
      return logger.error("Redis Error", err);
    });
  }

  RedisInterface.prototype.info = function(callback) {
    return this.client.info(function(err, resp) {
      var lines, redis_info;
      if (err) {
        return callback(err);
      }
      lines = resp.split("\n");
      lines = resp.trim().split("\n");
      redis_info = _.map(lines, function(val) {
        var kv;
        kv = val.split(":");
        return {
          key: kv[0],
          value: kv[1].trim()
        };
      });
      return callback(err, redis_info);
    });
  };

  RedisInterface.prototype.select = function(db, callback) {
    return this.client.select(db, callback);
  };

  RedisInterface.prototype.database = function() {
    return this.client.selected_db || 0;
  };

  RedisInterface.prototype.get_keys = function(filter, callback) {
    var client;
    if (filter == null) {
      filter = "*";
    }
    logger.info("get_keys", filter);
    client = this.client;
    return client.send_command("keys", [filter], function(err, keys) {
      if (err) {
        return callback(err);
      }
      logger.info("keys", keys.length);
      if (keys.length === 0) {
        return callback(err, keys);
      }
      return Step(function() {
        var key, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          client.send_command("type", [key], this.parallel());
        }
      }, function() {
        var err2, keys_with_types, values;
        err2 = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        keys_with_types = _.map(_.zip(keys, values), function(kv) {
          return {
            key: kv[0],
            type: kv[1]
          };
        });
        callback(err, keys_with_types);
      });
    });
  };

  RedisInterface.prototype.get = function(key, callback) {
    return this.client.get(key, callback);
  };

  RedisInterface.prototype.set = function(key, value, callback) {
    return this.client.set(key, value, callback);
  };

  RedisInterface.prototype.send_command = function(command, args, callback) {
    return this.client.send_command(command, args, callback);
  };

  return RedisInterface;

})();

module.exports = RedisInterface;
